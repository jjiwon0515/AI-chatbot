import os
import sqlite3

# ───────── 설정 ─────────
# 이 파일이 위치한 backend/ 폴더 기준으로 DB 파일 경로 설정
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_FILENAME = "unibot_extended.db"
DB_PATH = os.path.join(BASE_DIR, DB_FILENAME)

# ───────── 이전 DB 파일 제거 (중첩 방지) ─────────
if os.path.exists(DB_PATH):
    os.remove(DB_PATH)
    print(f"기존 DB 파일 삭제: {DB_PATH}")

# ───────── DB 연결 및 커서 생성 ─────────
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    cur.execute("""
    CREATE TABLE IF NOT EXISTS restaurants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        category TEXT,
        distance_min INTEGER,
        tags TEXT,
        description TEXT
    );
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS liberal_arts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        professor TEXT,
        category TEXT,
        grade_level TEXT,
        review TEXT
    );
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS graduation_credits (
        entry_type       TEXT,    -- 신입/편입/전과 구분
        program          TEXT,    -- 일반학과, 인공지능융합학부 등
        entry_term       TEXT,    -- 편입학기(신입·전과는 NULL)
        total_credits    INTEGER, -- 졸업학점
        gen_required     INTEGER, -- 교양필수
        gen_area_req     INTEGER, -- 교양영역필수 (편입생·전과생엔 NULL)
        gen_major_fusion INTEGER, -- 교양단일전공·융합
        dbl_main         INTEGER, -- 복수·연계 주전공
        dbl_sub          INTEGER, -- 복수·연계 복수/연계
        minor_main       INTEGER, -- 부전공 주전공
        minor_sub        INTEGER, -- 부전공 부전공
        teach_main       INTEGER, -- 교직 주전공
        teach_sub        INTEGER, -- 교직 교직과목
        life_main        INTEGER, -- 평생교육사 주전공
        life_sub         INTEGER, -- 평생교육사 평생과목
        free_credits     TEXT     -- 자유학점 (범위)
    );
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS department_curriculum (
    dept_name TEXT PRIMARY KEY,
    curriculum_url TEXT
    );
    """)
    # 2025 3월 이후
    cur.execute("""
    CREATE TABLE IF NOT EXISTS academic_calendar (
        id         INTEGER PRIMARY KEY AUTOINCREMENT,
        year       INTEGER,       -- 연도
        month      INTEGER,       -- 월
        start_date TEXT,          -- 시작일 (MM.DD)
        end_date   TEXT,          -- 종료일 (MM.DD)
        event      TEXT           -- 행사명
    );
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS scholarships (
        id          INTEGER PRIMARY KEY AUTOINCREMENT,
        category    TEXT,    -- 장학금 종류 (성적우수, 특별, 근로, 기타)
        name        TEXT,    -- 장학금 명
        app_period  TEXT,    -- 모집 시기
        dist_period TEXT,    -- 지급 시기
        eligibility TEXT,    -- 지급 대상 및 조건
        remarks     TEXT     -- 비고 (지급율, 시급 등)
    );
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS certificates (
        id           INTEGER PRIMARY KEY AUTOINCREMENT,
        target       TEXT,   -- 발급대상
        department   TEXT,   -- 발급 기관
        korean_name  TEXT,   -- 국문 명칭
        english_name TEXT    -- 영문 명칭
    );
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS certificate_issuance (
        id               INTEGER PRIMARY KEY AUTOINCREMENT,
        channel          TEXT,    -- 발급 채널 (본교 방문, 인터넷, 우편, 팩스)
        method           TEXT,    -- 신청 방법
        hours            TEXT,    -- 이용 시간
        processing_time  TEXT,    -- 소요 시간
        fee_info         TEXT,    -- 요금 안내
        payment_method   TEXT,    -- 결제 방법
        extra_info       TEXT     -- 추가 정보 (계좌, 유의사항, 웹사이트 등)
    );
    """)

    issuance = [
        # 본교 방문
        ("본교 방문", "무인발급기 이용 (중앙도서관 앞)", 
        "연중무휴 07:00-21:00", "즉시발급", 
        "발급수수료 500원 + 발급매수", 
        "교통카드·신용카드·모바일운임카드", 
        None),

        ("본교 방문", "학사지원팀 방문 및 신청서 작성 (신분증 지참)", 
        "월·금 09:00-17:30 / 09:00-15:00 (주말·공휴일 휴무)", "즉시발급", 
        "발급수수료 500원 + 발급매수", 
        None, 
        None),

        # 인터넷발급 서비스
        ("인터넷발급", "캠퍼스라이프 서비스 접속 ▶ 회원가입 후 증명서 신청", 
        "365일", "즉시발급", 
        "발급수수료 500원 + 발급매수 + 대행수수료(증명서당 1,000원, 1종 추가당 500원)", 
        "신용카드·휴대폰결제", 
        None),

        # 우편발급 서비스
        ("우편발급", "온라인 증명발급 후 아래 계좌로 요금 입금", 
        "365일", "입금 후 약 3~5일", 
        "발급수수료 500원 + 발급매수 + 우편요금(EMS 요금)", 
        "무통장입금", 
        "우리은행 071-373436-13-001(예: 삼육대학교)"),

        # 팩스발급 서비스
        ("팩스발급", "행정지원팀 방문 또는 민원24(eGov.go.kr) 신청", 
        "월·금 09:00-17:00 / 09:00-15:00 (주말·공휴일 휴무)", "신청 후 3시간 이내", 
        "발급수수료 500원 + 발급매수 + 팩스수수료", 
        "기관장 납부", 
        "웹사이트: http://www.egov.go.kr")
    ]

    cur.executemany("""
    INSERT INTO certificate_issuance 
    (channel, method, hours, processing_time, fee_info, payment_method, extra_info)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, issuance)

    certificates = [
        # 삼육대학교
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "재학증명서",      "재학증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "휴학증명서",      "휴학증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "제적증명서",      "제적증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "성적증명서",      "성적증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "졸업증명서",      "졸업증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "졸업예정증명서",  "졸업예정증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "수료증명서",      "수료증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "재직증명서",      "재직증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육대학교", "교직이수증명서",  "교직이수증명서"),

        # 삼육의명대학
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "재학증명서",      "재학증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "휴학증명서",      "휴학증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "제적증명서",      "제적증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "성적증명서",      "성적증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "졸업증명서",      "수료증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "졸업예정증명서",  "졸업예정증명서"),
        ("재학생·휴학생·재적생·졸업생", "삼육의명대학", "수료증명서",      "수료증명서"),

        # 대학원
        ("재학생·휴학생·재적생·졸업생", "대학원",       "재학증명서",      "재학증명서"),
        ("재학생·휴학생·재적생·졸업생", "대학원",       "휴학증명서",      "휴학증명서"),
        ("재학생·휴학생·재적생·졸업생", "대학원",       "제적증명서",      "제적증명서"),
        ("재학생·휴학생·재적생·졸업생", "대학원",       "성적증명서",      "성적증명서"),
        ("재학생·휴학생·재적생·졸업생", "대학원",       "학위수여증명서",  "학위수여증명서"),
        ("재학생·휴학생·재적생·졸업생", "대학원",       "수료증명서",      "수료증명서"),
    ]

    cur.executemany(
        "INSERT INTO certificates (target, department, korean_name, english_name) VALUES (?, ?, ?, ?)",
        certificates
    )


    #실제 자료 아님
    scholarships = [
        # 성적우수장학금
        ("성적우수장학금", "성적우수장학금", "1학기(2월)/2학기(8월)", "1학기(3월)/2학기(9월)",
        "전학년 재학생, 직전학기 평점 3.8 이상", "등록금의 30%"),

        # 특별장학금
        ("특별장학금", "기초생활수급자장학금",   "수시", "수시", "기초생활수급자", ""),
        ("특별장학금", "차상위계층장학금",     "수시", "수시", "차상위계층", ""),
        ("특별장학금", "장애인장학금",         "수시", "수시", "장애학생", ""),
        ("특별장학금", "다문화가정장학금",     "수시", "수시", "다문화가정", ""),
        ("특별장학금", "저소득장학금",         "수시", "수시", "저소득가정", ""),
        ("특별장학금", "다둥이가정장학금",     "수시", "수시", "다둥이가정", ""),
        ("특별장학금", "해외인턴장학금",       "수시", "수시", "해외인턴", ""),
        ("특별장학금", "국가보훈대상자장학금", "수시", "수시", "국가유공자", ""),
        ("특별장학금", "희귀난치병장학금",     "수시", "수시", "희귀난치병 학생", ""),
        ("특별장학금", "봉사장학금",           "수시", "수시", "봉사시간 80시간 이상", ""),
        ("특별장학금", "입학성적우수장학금",   "신입생", "신입생", "입학 성적 우수", ""),

        # 근로장학금
        ("근로장학금", "근로장학 I",      "학기 중", "매월", "주 15시간 근무",     "변동"),
        ("근로장학금", "근로장학 II",     "방학 중", "매월", "주 20시간 근무",     "변동"),
        ("근로장학금", "도서관근로장학금", "학기 중", "매월", "주 10시간 근무",     "변동"),
        ("근로장학금", "행정조교근로장학금","학기 중", "매월", "주 10시간 근무",     "변동"),
        ("근로장학금", "실험실근로장학금", "학기 중", "매월", "주 10시간 근무",     "변동"),

        # 기타장학금
        ("기타장학금", "교외장학금", "수시", "수시", "교외 장학재단", "")
    ]

    cur.executemany(
        "INSERT INTO scholarships (category, name, app_period, dist_period, eligibility, remarks) VALUES (?, ?, ?, ?, ?, ?)",
        scholarships
    )


    calendar = [
        # 2025년
        (2025, 3,  '03.01','03.01','삼일절'),
        (2025, 3,  '03.03','03.03','대체공휴일'),
        (2025, 3,  '03.04','03.04','개강/입학식'),
        (2025, 3,  '03.25','03.27','수강정정'),

        (2025, 4,  '04.14','05.02','중간고사(7주차)'),
        (2025, 4,  '04.21','04.25','교직원 업무평가'),
        (2025, 4,  '04.22','04.28','중간고사(4주차)'),
        
        (2025, 5,  '05.01','05.01','근로자의 날'),
        (2025, 5,  '05.05','05.05','어린이날/식개원일'),
        (2025, 5,  '05.06','05.06','대체공휴일'),
        (2025, 5,  '05.07','05.30','학교현장 교육실습'),
        (2025, 5,  '05.12','05.16','사랑나눔축제'),
        (2025, 5,  '05.26','05.28','개별학기 수강신청'),

        (2025, 6,  '06.06','06.06','현충일'),
        (2025, 6,  '06.10','06.16','기말고사(15주차)'),
        (2025, 6,  '06.10','06.23','성적입력기간'),
        (2025, 6,  '06.17','06.17','교수회의'),
        (2025, 6,  '06.23','07.11','휴계기간'),
        (2025, 6,  '06.24','06.30','성적확인기간'),

        (2025, 7,  '07.10','07.15','계절학기 성적입력'),
        (2025, 7,  '07.16','07.16','계절학기 성적확인'),
        (2025, 7,  '07.28','07.28','졸업사정회'),
        (2025, 7,  '07.28','07.30','예비수강신청'),
        (2025, 7,  '07.28','08.08','교직적성및적격성'),

        (2025, 8,  '08.04','08.06','본수강신청'),
        (2025, 8,  '08.14','08.14','후기 학위수여식'),
        (2025, 8,  '08.15','08.15','광복절'),
        (2025, 8,  '08.18','08.22','재학생 등록기간'),
        (2025, 8,  '08.25','08.25','교수회의'),
        (2025, 8,  '08.29','08.29','추석연휴'),

        (2025, 9,  '09.01','09.01','개강'),
        (2025, 9,  '09.01','09.05','수강정정 및 수강신청 확인 기간(1주차)'),
        (2025, 9,  '09.22','09.24','수강 중도포기(4주차)'),
        (2025, 9,  '09.29','09.29','천보축전'),
        (2025, 9,  '09.30','09.30','체육대회'),

        (2025,10,  '10.03','10.03','개천절'),
        (2025,10,  '10.06','10.08','추석'),
        (2025,10,  '10.09','10.09','한글날'),
        (2025,10,  '10.10','10.10','개교기념일'),
        (2025,10,  '10.13','10.31','중간강의평가(7주차)'),
        (2025,10,  '10.20','10.24','중간고사(8주차)'),
        (2025,10,  '10.20','10.24','교직원 영성축제'),

        (2025,11,  '11.03','11.07','사랑나눔축제'),
        (2025,11,  '11.24','11.26','개절학기 수강신청'),

        (2025,12,  '12.08','12.12','기말고사(15주차)'),
        (2025,12,  '12.08','12.19','성적입력기간'),
        (2025,12,  '12.15','12.15','교수협의회'),
        (2025,12,  '12.22','12.26','성적확인기간'),
        (2025,12,  '12.22','01.09','동계계절학기'),
        (2025,12,  '12.25','12.25','성탄절'),
        (2025,12,  '12.31','12.31','종무식'),

        # 2026년
        (2026, 1,  '01.01','01.01','신정'),
        (2026, 1,  '01.02','01.02','신년 교례회 및 시무식'),
        (2026, 1,  '01.05','01.16','교역자계절대학'),
        (2026, 1,  '01.12','01.13','개별학기 성적입력'),
        (2026, 1,  '01.14','01.14','개별학기 성적확인'),
        (2026, 1,  '01.26','01.28','예비수강신청'),
        (2026, 1,  '01.26','01.26','졸업사정회'),

        (2026, 2,  '02.02','02.04','본수강신청'),
        (2026, 2,  '02.10','02.12','MVP CAMP(1차)'),
        (2026, 2,  '02.11','02.20','재학생 등록기간'),
        (2026, 2,  '02.13','02.13','전기 학위수여식'),
        (2026, 2,  '02.23','02.23','교수협의회'),
        (2026, 2,  '02.23','02.25','MVP CAMP(2차)'),
        (2026, 2,  '02.26','02.26','편입생 오리엔테이션'),
        (2026, 2,  '02.26','02.27','신·편입생 수강신청'),
        (2026, 2,  '02.27','02.27','휴·복학 만기일'),
    ]

    cur.executemany(
        "INSERT INTO academic_calendar (year, month, start_date, end_date, event) VALUES (?, ?, ?, ?, ?)",
        calendar
    )


    curriculum_links = [
        ("컴퓨터공학부", "https://www.syu.ac.kr/cse/curriculum/curriculum-roadmap/"),
        ("인공지능융합학부",   "https://www.syu.ac.kr/aice/curriculum/graduation-system-diagram/"),
        ("자유전공학부",       "https://www.syu.ac.kr/supreme/curriculum/course-completion-system/"),
        ("화학생명과학과",       "https://www.syu.ac.kr/chem/curriculum/curriculum-roadmap/"),
        ("데이터클라우드공학과",  "https://www.syu.ac.kr/dce/curriculum/curriculum-roadmap/"),
        ("항공관광외국어학부",       "https://www.syu.ac.kr/atfl/curriculum-roadmap/"),
        ("바이오융합공학과",       "https://www.syu.ac.kr/ib/curriculum-roadmap/"),
        ("체육학과",       "https://www.syu.ac.kr/hhp/curriculum/curriculum/"),
        ("물리치료학과",       "https://www.syu.ac.kr/pt/curriculum-roadmap/"),
        ("상담심리학과",       "https://www.syu.ac.kr/couns/curriculum-roadmap/"),
        ("아트앤디자인학과",       "https://www.syu.ac.kr/arts/curriculum/curriculum-roadmap/"),
        ("보건관리학과",       "https://www.syu.ac.kr/syuhealth/department-introduction/course-introduction/curriculum-roadmap/"),
        ("환경디자인원예학과",       "https://www.syu.ac.kr/envdh/"),
        ("식품영양학과",       "https://www.syu.ac.kr/fn/"),
        ("동물자원학과",       "https://www.syu.ac.kr/anibiotech/"),
        ("약학과",       "https://www.syu.ac.kr/pharmacy/undergraduate-information/academic-credit-table/credit-6/"),
        
        # … 추가 학과/URL …
    ]

    cur.executemany("""
    INSERT OR REPLACE INTO department_curriculum (dept_name, curriculum_url)
    VALUES (?, ?)
    """, curriculum_links)


    data = [
        # 신입학생 졸업학점
        ("신입", "일반 학과",         None, 130, 24, 15,  75,  39, 36,  54, 21, 50, 22, 54, 30, "7~16"),
        ("신입", "인공지능융합학부 데이터클라우드공학과 컴퓨터공학부", None, 140, 24, 15,  85,  49, 36,  64, 21, None, None, 64, 30, "7~16"),
        ("신입", "건축학과 5년제",     None, 160, 24, 15, 121, 121, 36, 121, 21, None, None,121, 30, None),
        ("신입", "약학과 6년제",       None, 240, 24, 15, 201, 201, 36, 201, 36, None, None,201, 30, None),

        # 편입학생 졸업학점
        ("편입", "일반 학과",   "3-1",  68,  6, None, 51, 39, 36, 51, 21, 51, 21, None, None, "0~11"),
        ("편입", "유치원교사양성 및 의료인력양성편입", "4-1",  34,  3, None, 21, 21, 36, 21, 21, 21, 30, None, None, "0~10"),
        ("편입", "인공지능융합학부 데이터클라우드공학과 컴퓨터공학부", "3-1",  72,  6, None, 61, 49, 36, 64, 21, 61, 30, None, None, "0~5"),
        ("편입", "건축학과 5년제",     "3-1", 102,  6, None, 86, None, None, None,None,86, 30, None, None, "0~10"),

        # 전과생 졸업학점
        ("전과", "일반 학과",   "1-1", 130, 24, 15,  75, 39, 36, 54, 21, 50, 22, 54, 30, "0~16"),
        ("전과", "일반 학과",   "2-1", 130, 24, 15,  63, 39, 36, 51, 21, None,None,51, 30, "0~16"),
        ("전과", "일반 학과",   "3-1", 130, 24, 15,  51, 39, 36, 51, 21, None,None,39, 30, "0~16"),
        ("전과", "일반 학과",   "4-1", 130, 24, 15,  51, 39, 36, 51, 21, None,None,39, 30, "0~16"),
        ("전과", "인공지능융합학부 데이터클라우드공학과 컴퓨터공학부", "1-1", 140, 24, 15,  85, 49, 36, 64, 21, None,None,64, 30, "0~16"),
        ("전과", "인공지능융합학부 데이터클라우드공학과 컴퓨터공학부", "2-1", 140, 24, 15,  73, 49, 36, 61, 21, None,None,61, 30, "0~16"),
        ("전과", "건축학과 5년제",     "1-1", 160, 24, 15, 121,121, 36,121, 21, None,None,121,30, "0~16"),
    ]


    cur.executemany("""
        INSERT INTO graduation_credits (
            entry_type, program, entry_term, total_credits,
            gen_required, gen_area_req, gen_major_fusion,
            dbl_main, dbl_sub, minor_main, minor_sub,
            teach_main, teach_sub, life_main, life_sub,
            free_credits
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, data)

    restaurants = [
        ('하늘지기', '한식', 5, '가성비, 혼밥', '학교 후문 앞 한식집'), #4.32
        ('홍원',   '중식', 5, '가성비, 단체', '짜탕면을 파는 중식당'), #4.51
        ('중국관', '중식', 5, '가성비, 빨리나오는', '볶음밥이 맛있는 중식당'), #4.52
        ('호또', '일식당', 6, '일식집, 단체', '오므라이스 맛집'),
        ('린스테이블', '카페', 6, '공부, 조용한', '과제하기 좋은 분위기 좋은 카페'),
        ('신쿵푸마라탕', '중식', 8, '마라탕, 매콤한', '후문 유일 마라탕집'),
        ('토리코코로', '일식', 6, '유명한, 담백한', '후문 유일 라멘집'),
        ('쌀국수 공방', '쌀국수', 10, '매콤한, 담백한', '다양한 음식을 파는 쌀국수집'),
        ('꿈꾸는떡볶이', '분식', 6, '매콤한, 단체, 가성비', '여럿이 먹기 좋은 즉석떡볶이'), #4.39
        ('마녀떡볶이', '분식', 7, '단품메뉴, 매콤한', '즉석 떡볶이와 일품요리 '), #4.39
        ('세상만사 감자탕', '한식', 8, '국물, 조용한', '후문 정류장 바로 앞의 식당'), #4.44
    ]
    liberal_arts = [
        ('클래식 음악과 여행', 'Alexander Park', '인문예술', '전학년', '일찍 끝내주시고 수업내용도 좋은 수업'),
        ('영화속 음악 산책','Alexander Park', '인문예술', '전학년', '일찍 끝내주시고 재미있는 수업'),
        ('연극과 뮤지컬 이해와 감상','최은실', '인문예술', '전학년', '1학기에 연극 2학기에 뮤지컬 수업합니다'),
        ('영화로 읽는 셰익스피어', '이기원', '인문예술', '전학년', '인문학에 관심있는 사람에게 강추하는 수업'),
        ('사고조사이론', '김훈','사회과학', '전학년', '시험을 쉽게 내주시는데 수업 내용도 재미있고 유익해요'),
        ('세계 식문화의 이해',  '김민주', '사회과학', '전학년', '수업양은 많지만 얻어가는게 많은 수업'),
        ('SW중심의 미래사회', '인문/이과', '디지털 리터러시', '전학년', '온라인 강의로 진행하고 시험도 쉬운 수업'),
        ('다문화와 사회통합','김명희', '인성', '전학년', '온강과 대면을 섞어서 편하게 들을 수 있는 수업이에요'),
        ('서비스 마케팅', '조희영', '인문', '전학년', '많은 강의중 가장 수업다운 수업이에요'),
        ('인간과 곤충','김동건', '예술', '전학년', '아주 자세히 설명해주시고 수업도 재밌어요'),
    ]

    cur.executemany("INSERT INTO restaurants (name, category, distance_min, tags, description) VALUES (?, ?, ?, ?, ?)", restaurants)
    cur.executemany("INSERT INTO liberal_arts (name, professor, category, grade_level, review) VALUES (?, ?, ?, ? , ?)", liberal_arts)

    # 커밋, 연결 종료
    conn.commit()
    conn.close()

    if __name__ == "__main__":
        
        pass

    print(f"Fin: {DB_PATH}")
